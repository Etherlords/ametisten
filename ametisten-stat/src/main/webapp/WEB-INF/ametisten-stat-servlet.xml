<?xml version="1.0" encoding="UTF-8"?>

<!--
    - DispatcherServlet application context for PetClinic's web tier.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    
    <mvc:annotation-driven />
    
    <context:annotation-config/>
    
    <!--
        - The controllers are autodetected POJOs labeled with the @Controller annotation.
    -->
    <context:component-scan base-package="org.etherlords.ametisten.stat"/>

    <!--
        - The form-based controllers within this application provide @RequestMapping
        - annotations at the type level for path mapping URLs and @RequestMapping
        - at the method level for request type mappings (e.g., GET and POST).
        - In contrast, ClinicController - which is not form-based - provides
        - @RequestMapping only at the method level for path mapping URLs.
        -
        - DefaultAnnotationHandlerMapping is driven by these annotations and is
        - enabled by default with Java 5+.
    -->

    <!--
        - This bean processes annotated handler methods, applying PetClinic-specific PropertyEditors
        - for request parameter binding. It overrides the default AnnotationMethodHandlerAdapter.

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="webBindingInitializer">
            <bean class="org.springframework.samples.petclinic.web.ClinicBindingInitializer"/>
        </property>
    </bean>
    -->

    <!--
        - This bean resolves specific types of exceptions to corresponding logical
        - view names for error views. The default behaviour of DispatcherServlet
        - is to propagate all exceptions to the servlet container: this will happen
        - here with all other types of exceptions.


    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
                <prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
                <prop key="java.lang.RuntimeException">serviceFault</prop>
            </props>
        </property>

        <property name="defaultErrorView" value="serviceFault" />
    </bean>
    -->
    <!--
        - This bean configures the 'prefix' and 'suffix' properties of
        - InternalResourceViewResolver, which resolves logical view names
        - returned by Controllers. For example, a logical view name of "vets"
        - will be mapped to "/WEB-INF/views/vets.jsp".
    -->
    
    <!-- 
	<bean
	    class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="messageConverters">
	        <list>
	            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
	                <property name="objectMapper" ref="customJacksonObjectMapper" />
	            </bean>
	        </list>
	    </property>
	</bean>
    -->
    

    <bean id="customJacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
    
    <bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
        factory-bean="customJacksonObjectMapper" factory-method="getSerializationConfig" />
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="customJacksonObjectMapper" />
        <property name="targetMethod" value="configure" />
        <property name="arguments">
            <list>
                <value type="org.codehaus.jackson.map.SerializationConfig.Feature">INDENT_OUTPUT</value>
                <value>true</value>
            </list>
        </property>
    </bean>
    
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	  <property name="mediaTypes">
	    <map>
	      <entry key="txt" value="text/*"/>
	      <entry key="html" value="text/html"/>
	      <entry key="json" value="application/json"/>
	    </map>
	  </property>
	  <!-- 
	  <property name="viewResolvers">
	    <list>
	      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <property name="prefix" value="${views.path.prefix}"/>
	        <property name="suffix" value="${views.path.suffix}"/>
	      </bean>
	    </list>
	  </property>
	  -->
	  <property name="defaultViews">
	    <list>
	      <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
	       <!-- property name="extractValueFromSingleKeyModel" value="true" /-->
	       <property name="objectMapper" ref="customJacksonObjectMapper" />
	      </bean>
	    </list>
	  </property>
    </bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000" />
	</bean>
	
	<!-- 
	<bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
	    factory-bean="jacksonObjectMapper" factory-method="getSerializationConfig" />
	-->

    <!--
        - Message source for this context, loaded from localized "messages_xx" files.
        - Could also reside in the root application context, as it is generic,
        - but is currently just used within PetClinic's web tier.
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
            p:basename="messages"/>
            
</beans>
